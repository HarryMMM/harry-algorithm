//Given the head of a linked list, return the node where the cycle begins. If 
//there is no cycle, return null. 
//
// There is a cycle in a linked list if there is some node in the list that can 
//be reached again by continuously following the next pointer. Internally, pos is 
//used to denote the index of the node that tail's next pointer is connected to (0
//-indexed). It is -1 if there is no cycle. Note that pos is not passed as a 
//parameter. 
//
// Do not modify the linked list. 
//
// 
// Example 1: 
//
// 
//Input: head = [3,2,0,-4], pos = 1
//Output: tail connects to node index 1
//Explanation: There is a cycle in the linked list, where tail connects to the 
//second node.
// 
//
// Example 2: 
//
// 
//Input: head = [1,2], pos = 0
//Output: tail connects to node index 0
//Explanation: There is a cycle in the linked list, where tail connects to the 
//first node.
// 
//
// Example 3: 
//
// 
//Input: head = [1], pos = -1
//Output: no cycle
//Explanation: There is no cycle in the linked list.
// 
//
// 
// Constraints: 
//
// 
// The number of the nodes in the list is in the range [0, 10‚Å¥]. 
// -10‚Åµ <= Node.val <= 10‚Åµ 
// pos is -1 or a valid index in the linked-list. 
// 
//
// 
// Follow up: Can you solve it using O(1) (i.e. constant) memory? 
// Related Topics Hash Table Linked List Two Pointers üëç 11213 üëé 821

package com.harryai.algorithm.leetcode.editor.en;

import com.harryai.algorithm.common.linkedlist.ListNode;

//java:Linked List Cycle II
public class P142LinkedListCycleIi {
    public static void main(String[] args) {
        Solution solution = new P142LinkedListCycleIi().new Solution();
        // [3,2,0,-4]
        ListNode a4 = new ListNode(-4);
        ListNode a3 = new ListNode(0, a4);
        ListNode a2 = new ListNode(2, a3);
        ListNode a1 = new ListNode(3, a2);
        a4.next = a2;
        solution.detectCycle(a1);
    }
    //leetcode submit region begin(Prohibit modification and deletion)

    /**
     * Definition for singly-linked list.
     * class ListNode {
     * int val;
     * ListNode next;
     * ListNode(int x) {
     * val = x;
     * next = null;
     * }
     * }
     * ‰ΩøÁî®Âø´Ôºàfast,ÊØèÊ¨°1Ê≠•ÔºâslowÔºàslowÊØèÊ¨°2Ê≠•ÔºâÔºõ
     * ÂÅáËÆæ„ÄêÈìæË°®Ëµ∑ÂßãÁÇπ„ÄëÂà∞[ÁéØËµ∑ÁÇπ]ÁöÑË∑ùÁ¶ª‰∏∫a,[ÁéØËµ∑ÁÇπ]Âà∞[fastÂíåslowÁõ∏ÈÅáÁÇπ]ÁöÑË∑ùÁ¶ª‰∏∫b,
     * [fastÂíåslowÁõ∏ÈÅáÁÇπ]Âà∞[ÁéØËµ∑ÁÇπ]ÁöÑË∑ùÁ¶ª‰∏∫c,fastÂíåslowÁõ∏ÈÅáÊó∂fastÂ∑≤ÁªèÁªï‰∫ÜÁéØnÂúàÔºåÂàôÂæóÂá∫Ôºö
     * slowËµ∞‰∫Ü a+bÁöÑË∑ùÁ¶ªÔºåfastËµ∞‰∫Üa+n(b+c)+b,Âõ†‰∏∫fastËµ∞ÁöÑË∑ùÁ¶ªÊòØslowÁöÑ‰∏§ÂÄç„ÄÇÂàôÂæóÂá∫Á≠âÂºèÔºö
     * a+n(b+c)+b=2(a+b),Êç¢ÁÆóÂæóÂà∞Ôºöa=nb+nc-b=nb+nc-b-c+c=(n-1)(b+c)+c,Áî±‰∫éb+cÁ≠â‰∫éÁéØÁöÑË∑ùÁ¶ªÔºå
     * ÊâÄ‰ª•Ê≠§ÂÖ¨ÂºèËß£Èáä‰∏∫Ôºö „ÄêÈìæË°®Ëµ∑ÂßãÁÇπ„ÄëÂà∞[ÁéØËµ∑ÁÇπ]ÁöÑË∑ùÁ¶ªÊ≠£Â•ΩÁ≠â‰∫éslowÁªßÁª≠Ëµ∞n-1ÂúàÁéØÂêéÂä†cÁöÑË∑ùÁ¶ª„ÄÇ
     * Êàë‰ª¨ÂÆö‰πâ‰∏Ä‰∏™ÊåáÈíàpos‰ªé„ÄêÈìæË°®Ëµ∑ÂßãÁÇπ„ÄëÂºÄÂßã‰∏ÄÊ≠•Ê≠•Ëµ∞Ôºåslow‰ªé[fastÂíåslowÁõ∏ÈÅáËäÇÁÇπ]ÁªßÁª≠Ëµ∞„ÄÇ
     * Âõ†‰∏∫Ê≠§Êó∂slowË∑ùÁ¶ªÁéØ[ÁéØËµ∑ÁÇπ]ÁöÑË∑ùÁ¶ªÊ≠£Â•ΩÊòØcÔºåÂÆÉ‰ª¨‰∏ÄÂÆö‰ºöÂú®ÁéØ[ÁéØËµ∑ÁÇπ]Áõ∏ÈÅá„ÄÇ
     */
    public class Solution {
        public ListNode detectCycle(ListNode head) {
            ListNode slow = head, fast = head, pos = head;
            // Â¶ÇÊûúfastÂíåslowÁöÑ‰∏ã‰∏ÄÊ≠•‰∏ç‰∏∫null,ÂàôÁªßÁª≠ÊâæÁõ∏ÈÅáÁÇπÔºåÂç≥Ë°®Á§∫ÊúâÁéØÔºåÂê¶ÂàôÊ≤°ÊúâÁéØ„ÄÇ
            while (slow != null && (slow = slow.next) != null && fast.next != null && (fast =
                    fast.next.next) != null) {
                // fast Âíå slowÁõ∏ÈÅáÔºåË°®Á§∫ÊúâÁéØ
                if (slow == fast) {
                    // Êå™Âä®posÂíåslow,Áõ∏ÈÅáÁÇπÂç≥ÊòØ[ÁéØËµ∑ÁÇπ]
                    while (pos != slow) {
                        pos = pos.next;
                        slow = slow.next;
                    }
                    return pos;
                }
            }
            return null;
        }
    }
//leetcode submit region end(Prohibit modification and deletion)

}
