//Given an integer n, return true if it is a power of two. Otherwise, return 
//false. 
//
// An integer n is a power of two, if there exists an integer x such that n == 2
//À£. 
//
// 
// Example 1: 
//
// 
//Input: n = 1
//Output: true
//Explanation: 2‚Å∞ = 1
// 
//
// Example 2: 
//
// 
//Input: n = 16
//Output: true
//Explanation: 2‚Å¥ = 16
// 
//
// Example 3: 
//
// 
//Input: n = 3
//Output: false
// 
//
// 
// Constraints: 
//
// 
// -2¬≥¬π <= n <= 2¬≥¬π - 1 
// 
//
// 
//Follow up: Could you solve it without loops/recursion?
//
// Related Topics Math Bit Manipulation Recursion üëç 5099 üëé 357

package com.harryai.algorithm.leetcode.editor.en;

//java:Power of Two
public class P231PowerOfTwo {
    public static void main(String[] args) {
        Solution solution = new P231PowerOfTwo().new Solution();
    }

    //leetcode submit region begin(Prohibit modification and deletion)
    class Solution {
        // n&-n ÂèØ‰ª•Ëé∑ÂèñnÊúÄ‰Ωé‰ΩçÁöÑ1ÔºåÂõ†‰∏∫Á¨¶ÂêàÈ¢òÊÑèÁöÑ2ÁöÑÂπÇ‰∏ÄÂÆöÂè™Êúâ‰∏Ä‰∏™ÊúÄ‰Ωé‰Ωç1Ôºå
        // ÊâÄ‰ª•ÔºåËé∑ÂèñnÊúÄ‰Ωé‰ΩçÁöÑ1ÂêéÂíånÊØîËæÉÔºåÂ¶ÇÊûúÁõ∏Á≠âÔºåË°®Á§∫nÊòØ2ÁöÑÂπÇ
        public boolean isPowerOfTwo(int n) {
            return n > 0 && (n & -n) == n;
        }


//        // ÊúÄÂ§ßÊï∞ÁöÑÁ∫¶Êùü
//        public boolean isPowerOfTwo(int n) {
//            return n > 0 && (1 << 30) % n == 0;
//        }
        // 2ÁöÑÂπÇ2ËøõÂà∂Ë°®Á§∫Ê≥ï‰∏ÄÂÆöÂè™Êúâ‰∏Ä‰∏™1ÔºåÊâÄ‰ª•ÁßªÈô§ÊúÄ‰Ωé‰ΩçÁöÑ1ÂêéÂ¶ÇÊûúÊòØ0ÔºåË°®Á§∫ÊòØ2ÁöÑÂπÇ
//        public boolean isPowerOfTwo(int n) {
//            return n > 0 && (n & (n - 1)) == 0;
//        }
    }
//leetcode submit region end(Prohibit modification and deletion)

}
